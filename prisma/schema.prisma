generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  username      String?         @unique
  bio           String?
  joinedAt      DateTime        @default(now())
  isVerified    Boolean         @default(false)
  role          String          @default("USER")
  accounts      Account[]
  lists         CharacterList[]
  followers     Follow[]        @relation("UserFollowers")
  follows       Follow[]        @relation("UserFollows")
  likes         Like[]
  ratings       Rating[]
  reviews       Review[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Universe {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  type        String
  imageUrl    String?
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  characters  Character[]

  @@map("universes")
}

model Character {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  description       String?
  imageUrl          String?
  universeId        String
  species           String?
  occupation        String?
  powers            String?
  aliases           String?
  firstAppearance   String?
  creator           String?
  status            String              @default("ACTIVE")
  aiDescription     String?
  personalityVector String?
  avgPersonality    Float               @default(0)
  avgPowers         Float               @default(0)
  avgWeaknesses     Float               @default(0)
  avgOrigin         Float               @default(0)
  avgImpact         Float               @default(0)
  overallRating     Float               @default(0)
  totalRatings      Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  fanartId          String?
  imageAttribution  String?
  imageLicense      String?
  imageSource       String?
  tmdbId            String?
  wikimediaFile     String?
  characterLists    CharacterListItem[]
  universe          Universe            @relation(fields: [universeId], references: [id])
  ratings           Rating[]
  reviews           Review[]

  @@map("characters")
}

model Rating {
  id          String    @id @default(cuid())
  userId      String
  characterId String
  personality Int
  powers      Int
  weaknesses  Int
  origin      Int
  impact      Int
  overall     Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@map("ratings")
}

model Review {
  id            String    @id @default(cuid())
  userId        String
  characterId   String
  title         String?
  content       String
  isRecommended Boolean?
  helpfulCount  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  character     Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model CharacterList {
  id          String              @id @default(cuid())
  userId      String
  title       String
  description String?
  isPublic    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  items       CharacterListItem[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("character_lists")
}

model CharacterListItem {
  id          String        @id @default(cuid())
  listId      String
  characterId String
  order       Int
  note        String?
  character   Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  list        CharacterList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, characterId])
  @@map("character_list_items")
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  targetId   String
  targetType String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetId, targetType])
  @@map("likes")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
